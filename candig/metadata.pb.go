// Code generated by protoc-gen-go. DO NOT EDIT.
// source: candig/metadata.proto

/*
Package metadata is a generated protocol buffer package.

It is generated from these files:
	candig/metadata.proto

It has these top-level messages:
	SearchIndividualsRequest
	GetIndividualRequest
	PutIndividualResponse
	PutBiosampleResponse
	SearchIndividualsResponse
	SearchBiosamplesRequest
	GetBiosampleRequest
	SearchBiosamplesResponse
	Individual
	Biosample
	AttributeValue
	AttributeValueList
	Attributes
	OntologyTerm
*/
package metadata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/ljdursi/candig_mds_pb_py/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SearchIndividualsRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SearchIndividualsRequest) Reset()                    { *m = SearchIndividualsRequest{} }
func (m *SearchIndividualsRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchIndividualsRequest) ProtoMessage()               {}
func (*SearchIndividualsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SearchIndividualsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetIndividualRequest struct {
	IndividualId string `protobuf:"bytes,1,opt,name=individual_id,json=individualId" json:"individual_id,omitempty"`
}

func (m *GetIndividualRequest) Reset()                    { *m = GetIndividualRequest{} }
func (m *GetIndividualRequest) String() string            { return proto.CompactTextString(m) }
func (*GetIndividualRequest) ProtoMessage()               {}
func (*GetIndividualRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetIndividualRequest) GetIndividualId() string {
	if m != nil {
		return m.IndividualId
	}
	return ""
}

type PutIndividualResponse struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *PutIndividualResponse) Reset()                    { *m = PutIndividualResponse{} }
func (m *PutIndividualResponse) String() string            { return proto.CompactTextString(m) }
func (*PutIndividualResponse) ProtoMessage()               {}
func (*PutIndividualResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PutIndividualResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PutIndividualResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PutBiosampleResponse struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *PutBiosampleResponse) Reset()                    { *m = PutBiosampleResponse{} }
func (m *PutBiosampleResponse) String() string            { return proto.CompactTextString(m) }
func (*PutBiosampleResponse) ProtoMessage()               {}
func (*PutBiosampleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PutBiosampleResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PutBiosampleResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SearchIndividualsResponse struct {
	Individuals []*Individual `protobuf:"bytes,1,rep,name=individuals" json:"individuals,omitempty"`
}

func (m *SearchIndividualsResponse) Reset()                    { *m = SearchIndividualsResponse{} }
func (m *SearchIndividualsResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchIndividualsResponse) ProtoMessage()               {}
func (*SearchIndividualsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SearchIndividualsResponse) GetIndividuals() []*Individual {
	if m != nil {
		return m.Individuals
	}
	return nil
}

type SearchBiosamplesRequest struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	IndividualId string `protobuf:"bytes,2,opt,name=individual_id,json=individualId" json:"individual_id,omitempty"`
}

func (m *SearchBiosamplesRequest) Reset()                    { *m = SearchBiosamplesRequest{} }
func (m *SearchBiosamplesRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchBiosamplesRequest) ProtoMessage()               {}
func (*SearchBiosamplesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SearchBiosamplesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchBiosamplesRequest) GetIndividualId() string {
	if m != nil {
		return m.IndividualId
	}
	return ""
}

type GetBiosampleRequest struct {
	BiosampleId string `protobuf:"bytes,1,opt,name=biosample_id,json=biosampleId" json:"biosample_id,omitempty"`
}

func (m *GetBiosampleRequest) Reset()                    { *m = GetBiosampleRequest{} }
func (m *GetBiosampleRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBiosampleRequest) ProtoMessage()               {}
func (*GetBiosampleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetBiosampleRequest) GetBiosampleId() string {
	if m != nil {
		return m.BiosampleId
	}
	return ""
}

type SearchBiosamplesResponse struct {
	Biosamples []*Biosample `protobuf:"bytes,1,rep,name=biosamples" json:"biosamples,omitempty"`
}

func (m *SearchBiosamplesResponse) Reset()                    { *m = SearchBiosamplesResponse{} }
func (m *SearchBiosamplesResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchBiosamplesResponse) ProtoMessage()               {}
func (*SearchBiosamplesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SearchBiosamplesResponse) GetBiosamples() []*Biosample {
	if m != nil {
		return m.Biosamples
	}
	return nil
}

type Individual struct {
	Id          string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DatasetId   string        `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	Name        string        `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string        `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Created     string        `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	Updated     string        `protobuf:"bytes,6,opt,name=updated" json:"updated,omitempty"`
	Species     *OntologyTerm `protobuf:"bytes,7,opt,name=species" json:"species,omitempty"`
	Sex         *OntologyTerm `protobuf:"bytes,8,opt,name=sex" json:"sex,omitempty"`
	Attributes  *Attributes   `protobuf:"bytes,10,opt,name=attributes" json:"attributes,omitempty"`
}

func (m *Individual) Reset()                    { *m = Individual{} }
func (m *Individual) String() string            { return proto.CompactTextString(m) }
func (*Individual) ProtoMessage()               {}
func (*Individual) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Individual) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Individual) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Individual) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Individual) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Individual) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Individual) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Individual) GetSpecies() *OntologyTerm {
	if m != nil {
		return m.Species
	}
	return nil
}

func (m *Individual) GetSex() *OntologyTerm {
	if m != nil {
		return m.Sex
	}
	return nil
}

func (m *Individual) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Biosample struct {
	Id                        string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DatasetId                 string        `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId" json:"dataset_id,omitempty"`
	Name                      string        `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description               string        `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Disease                   *OntologyTerm `protobuf:"bytes,5,opt,name=disease" json:"disease,omitempty"`
	Created                   string        `protobuf:"bytes,6,opt,name=created" json:"created,omitempty"`
	Updated                   string        `protobuf:"bytes,7,opt,name=updated" json:"updated,omitempty"`
	IndividualId              string        `protobuf:"bytes,8,opt,name=individual_id,json=individualId" json:"individual_id,omitempty"`
	Attributes                *Attributes   `protobuf:"bytes,10,opt,name=attributes" json:"attributes,omitempty"`
	IndividualAgeAtCollection string        `protobuf:"bytes,11,opt,name=individual_age_at_collection,json=individualAgeAtCollection" json:"individual_age_at_collection,omitempty"`
}

func (m *Biosample) Reset()                    { *m = Biosample{} }
func (m *Biosample) String() string            { return proto.CompactTextString(m) }
func (*Biosample) ProtoMessage()               {}
func (*Biosample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Biosample) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Biosample) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Biosample) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Biosample) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Biosample) GetDisease() *OntologyTerm {
	if m != nil {
		return m.Disease
	}
	return nil
}

func (m *Biosample) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Biosample) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Biosample) GetIndividualId() string {
	if m != nil {
		return m.IndividualId
	}
	return ""
}

func (m *Biosample) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Biosample) GetIndividualAgeAtCollection() string {
	if m != nil {
		return m.IndividualAgeAtCollection
	}
	return ""
}

type AttributeValue struct {
	// Types that are valid to be assigned to Value:
	//	*AttributeValue_StringValue
	//	*AttributeValue_Int64Value
	//	*AttributeValue_Int32Value
	//	*AttributeValue_BoolValue
	//	*AttributeValue_DoubleValue
	//	*AttributeValue_OntologyTerm
	//	*AttributeValue_Attributes
	//	*AttributeValue_AttributeList
	Value isAttributeValue_Value `protobuf_oneof:"value"`
}

func (m *AttributeValue) Reset()                    { *m = AttributeValue{} }
func (m *AttributeValue) String() string            { return proto.CompactTextString(m) }
func (*AttributeValue) ProtoMessage()               {}
func (*AttributeValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type isAttributeValue_Value interface {
	isAttributeValue_Value()
}

type AttributeValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,oneof"`
}
type AttributeValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,2,opt,name=int64_value,json=int64Value,oneof"`
}
type AttributeValue_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,oneof"`
}
type AttributeValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,oneof"`
}
type AttributeValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,oneof"`
}
type AttributeValue_OntologyTerm struct {
	OntologyTerm *OntologyTerm `protobuf:"bytes,7,opt,name=ontology_term,json=ontologyTerm,oneof"`
}
type AttributeValue_Attributes struct {
	Attributes *Attributes `protobuf:"bytes,12,opt,name=attributes,oneof"`
}
type AttributeValue_AttributeList struct {
	AttributeList *AttributeValueList `protobuf:"bytes,13,opt,name=attribute_list,json=attributeList,oneof"`
}

func (*AttributeValue_StringValue) isAttributeValue_Value()   {}
func (*AttributeValue_Int64Value) isAttributeValue_Value()    {}
func (*AttributeValue_Int32Value) isAttributeValue_Value()    {}
func (*AttributeValue_BoolValue) isAttributeValue_Value()     {}
func (*AttributeValue_DoubleValue) isAttributeValue_Value()   {}
func (*AttributeValue_OntologyTerm) isAttributeValue_Value()  {}
func (*AttributeValue_Attributes) isAttributeValue_Value()    {}
func (*AttributeValue_AttributeList) isAttributeValue_Value() {}

func (m *AttributeValue) GetValue() isAttributeValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *AttributeValue) GetStringValue() string {
	if x, ok := m.GetValue().(*AttributeValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *AttributeValue) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*AttributeValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *AttributeValue) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*AttributeValue_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *AttributeValue) GetBoolValue() bool {
	if x, ok := m.GetValue().(*AttributeValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *AttributeValue) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*AttributeValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *AttributeValue) GetOntologyTerm() *OntologyTerm {
	if x, ok := m.GetValue().(*AttributeValue_OntologyTerm); ok {
		return x.OntologyTerm
	}
	return nil
}

func (m *AttributeValue) GetAttributes() *Attributes {
	if x, ok := m.GetValue().(*AttributeValue_Attributes); ok {
		return x.Attributes
	}
	return nil
}

func (m *AttributeValue) GetAttributeList() *AttributeValueList {
	if x, ok := m.GetValue().(*AttributeValue_AttributeList); ok {
		return x.AttributeList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AttributeValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AttributeValue_OneofMarshaler, _AttributeValue_OneofUnmarshaler, _AttributeValue_OneofSizer, []interface{}{
		(*AttributeValue_StringValue)(nil),
		(*AttributeValue_Int64Value)(nil),
		(*AttributeValue_Int32Value)(nil),
		(*AttributeValue_BoolValue)(nil),
		(*AttributeValue_DoubleValue)(nil),
		(*AttributeValue_OntologyTerm)(nil),
		(*AttributeValue_Attributes)(nil),
		(*AttributeValue_AttributeList)(nil),
	}
}

func _AttributeValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AttributeValue)
	// value
	switch x := m.Value.(type) {
	case *AttributeValue_StringValue:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *AttributeValue_Int64Value:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *AttributeValue_Int32Value:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int32Value))
	case *AttributeValue_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *AttributeValue_DoubleValue:
		b.EncodeVarint(5<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *AttributeValue_OntologyTerm:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OntologyTerm); err != nil {
			return err
		}
	case *AttributeValue_Attributes:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Attributes); err != nil {
			return err
		}
	case *AttributeValue_AttributeList:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AttributeList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AttributeValue.Value has unexpected type %T", x)
	}
	return nil
}

func _AttributeValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AttributeValue)
	switch tag {
	case 1: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &AttributeValue_StringValue{x}
		return true, err
	case 2: // value.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &AttributeValue_Int64Value{int64(x)}
		return true, err
	case 3: // value.int32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &AttributeValue_Int32Value{int32(x)}
		return true, err
	case 4: // value.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &AttributeValue_BoolValue{x != 0}
		return true, err
	case 5: // value.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &AttributeValue_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 7: // value.ontology_term
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OntologyTerm)
		err := b.DecodeMessage(msg)
		m.Value = &AttributeValue_OntologyTerm{msg}
		return true, err
	case 12: // value.attributes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Attributes)
		err := b.DecodeMessage(msg)
		m.Value = &AttributeValue_Attributes{msg}
		return true, err
	case 13: // value.attribute_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AttributeValueList)
		err := b.DecodeMessage(msg)
		m.Value = &AttributeValue_AttributeList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AttributeValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AttributeValue)
	// value
	switch x := m.Value.(type) {
	case *AttributeValue_StringValue:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *AttributeValue_Int64Value:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *AttributeValue_Int32Value:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int32Value))
	case *AttributeValue_BoolValue:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *AttributeValue_DoubleValue:
		n += proto.SizeVarint(5<<3 | proto.WireFixed64)
		n += 8
	case *AttributeValue_OntologyTerm:
		s := proto.Size(x.OntologyTerm)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AttributeValue_Attributes:
		s := proto.Size(x.Attributes)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AttributeValue_AttributeList:
		s := proto.Size(x.AttributeList)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AttributeValueList struct {
	Values []*AttributeValue `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *AttributeValueList) Reset()                    { *m = AttributeValueList{} }
func (m *AttributeValueList) String() string            { return proto.CompactTextString(m) }
func (*AttributeValueList) ProtoMessage()               {}
func (*AttributeValueList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AttributeValueList) GetValues() []*AttributeValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type Attributes struct {
	Attr map[string]*AttributeValueList `protobuf:"bytes,1,rep,name=attr" json:"attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Attributes) Reset()                    { *m = Attributes{} }
func (m *Attributes) String() string            { return proto.CompactTextString(m) }
func (*Attributes) ProtoMessage()               {}
func (*Attributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Attributes) GetAttr() map[string]*AttributeValueList {
	if m != nil {
		return m.Attr
	}
	return nil
}

type OntologyTerm struct {
	TermId string `protobuf:"bytes,1,opt,name=term_id,json=termId" json:"term_id,omitempty"`
	Term   string `protobuf:"bytes,2,opt,name=term" json:"term,omitempty"`
}

func (m *OntologyTerm) Reset()                    { *m = OntologyTerm{} }
func (m *OntologyTerm) String() string            { return proto.CompactTextString(m) }
func (*OntologyTerm) ProtoMessage()               {}
func (*OntologyTerm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *OntologyTerm) GetTermId() string {
	if m != nil {
		return m.TermId
	}
	return ""
}

func (m *OntologyTerm) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func init() {
	proto.RegisterType((*SearchIndividualsRequest)(nil), "metadata.SearchIndividualsRequest")
	proto.RegisterType((*GetIndividualRequest)(nil), "metadata.GetIndividualRequest")
	proto.RegisterType((*PutIndividualResponse)(nil), "metadata.PutIndividualResponse")
	proto.RegisterType((*PutBiosampleResponse)(nil), "metadata.PutBiosampleResponse")
	proto.RegisterType((*SearchIndividualsResponse)(nil), "metadata.SearchIndividualsResponse")
	proto.RegisterType((*SearchBiosamplesRequest)(nil), "metadata.SearchBiosamplesRequest")
	proto.RegisterType((*GetBiosampleRequest)(nil), "metadata.GetBiosampleRequest")
	proto.RegisterType((*SearchBiosamplesResponse)(nil), "metadata.SearchBiosamplesResponse")
	proto.RegisterType((*Individual)(nil), "metadata.Individual")
	proto.RegisterType((*Biosample)(nil), "metadata.Biosample")
	proto.RegisterType((*AttributeValue)(nil), "metadata.AttributeValue")
	proto.RegisterType((*AttributeValueList)(nil), "metadata.AttributeValueList")
	proto.RegisterType((*Attributes)(nil), "metadata.Attributes")
	proto.RegisterType((*OntologyTerm)(nil), "metadata.OntologyTerm")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MetadataService service

type MetadataServiceClient interface {
	SearchIndividuals(ctx context.Context, in *SearchIndividualsRequest, opts ...grpc.CallOption) (*SearchIndividualsResponse, error)
	SearchBiosamples(ctx context.Context, in *SearchBiosamplesRequest, opts ...grpc.CallOption) (*SearchBiosamplesResponse, error)
	GetIndividual(ctx context.Context, in *GetIndividualRequest, opts ...grpc.CallOption) (*Individual, error)
	GetBiosample(ctx context.Context, in *GetBiosampleRequest, opts ...grpc.CallOption) (*Biosample, error)
	PutIndividual(ctx context.Context, in *Individual, opts ...grpc.CallOption) (*PutIndividualResponse, error)
	PutBiosample(ctx context.Context, in *Biosample, opts ...grpc.CallOption) (*PutBiosampleResponse, error)
}

type metadataServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetadataServiceClient(cc *grpc.ClientConn) MetadataServiceClient {
	return &metadataServiceClient{cc}
}

func (c *metadataServiceClient) SearchIndividuals(ctx context.Context, in *SearchIndividualsRequest, opts ...grpc.CallOption) (*SearchIndividualsResponse, error) {
	out := new(SearchIndividualsResponse)
	err := grpc.Invoke(ctx, "/metadata.MetadataService/SearchIndividuals", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) SearchBiosamples(ctx context.Context, in *SearchBiosamplesRequest, opts ...grpc.CallOption) (*SearchBiosamplesResponse, error) {
	out := new(SearchBiosamplesResponse)
	err := grpc.Invoke(ctx, "/metadata.MetadataService/SearchBiosamples", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetIndividual(ctx context.Context, in *GetIndividualRequest, opts ...grpc.CallOption) (*Individual, error) {
	out := new(Individual)
	err := grpc.Invoke(ctx, "/metadata.MetadataService/GetIndividual", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) GetBiosample(ctx context.Context, in *GetBiosampleRequest, opts ...grpc.CallOption) (*Biosample, error) {
	out := new(Biosample)
	err := grpc.Invoke(ctx, "/metadata.MetadataService/GetBiosample", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) PutIndividual(ctx context.Context, in *Individual, opts ...grpc.CallOption) (*PutIndividualResponse, error) {
	out := new(PutIndividualResponse)
	err := grpc.Invoke(ctx, "/metadata.MetadataService/PutIndividual", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataServiceClient) PutBiosample(ctx context.Context, in *Biosample, opts ...grpc.CallOption) (*PutBiosampleResponse, error) {
	out := new(PutBiosampleResponse)
	err := grpc.Invoke(ctx, "/metadata.MetadataService/PutBiosample", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetadataService service

type MetadataServiceServer interface {
	SearchIndividuals(context.Context, *SearchIndividualsRequest) (*SearchIndividualsResponse, error)
	SearchBiosamples(context.Context, *SearchBiosamplesRequest) (*SearchBiosamplesResponse, error)
	GetIndividual(context.Context, *GetIndividualRequest) (*Individual, error)
	GetBiosample(context.Context, *GetBiosampleRequest) (*Biosample, error)
	PutIndividual(context.Context, *Individual) (*PutIndividualResponse, error)
	PutBiosample(context.Context, *Biosample) (*PutBiosampleResponse, error)
}

func RegisterMetadataServiceServer(s *grpc.Server, srv MetadataServiceServer) {
	s.RegisterService(&_MetadataService_serviceDesc, srv)
}

func _MetadataService_SearchIndividuals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIndividualsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).SearchIndividuals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.MetadataService/SearchIndividuals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).SearchIndividuals(ctx, req.(*SearchIndividualsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_SearchBiosamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBiosamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).SearchBiosamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.MetadataService/SearchBiosamples",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).SearchBiosamples(ctx, req.(*SearchBiosamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetIndividual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndividualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetIndividual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.MetadataService/GetIndividual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetIndividual(ctx, req.(*GetIndividualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_GetBiosample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBiosampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).GetBiosample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.MetadataService/GetBiosample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).GetBiosample(ctx, req.(*GetBiosampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_PutIndividual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Individual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).PutIndividual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.MetadataService/PutIndividual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).PutIndividual(ctx, req.(*Individual))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataService_PutBiosample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Biosample)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServiceServer).PutBiosample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.MetadataService/PutBiosample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServiceServer).PutBiosample(ctx, req.(*Biosample))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetadataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.MetadataService",
	HandlerType: (*MetadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchIndividuals",
			Handler:    _MetadataService_SearchIndividuals_Handler,
		},
		{
			MethodName: "SearchBiosamples",
			Handler:    _MetadataService_SearchBiosamples_Handler,
		},
		{
			MethodName: "GetIndividual",
			Handler:    _MetadataService_GetIndividual_Handler,
		},
		{
			MethodName: "GetBiosample",
			Handler:    _MetadataService_GetBiosample_Handler,
		},
		{
			MethodName: "PutIndividual",
			Handler:    _MetadataService_PutIndividual_Handler,
		},
		{
			MethodName: "PutBiosample",
			Handler:    _MetadataService_PutBiosample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "candig/metadata.proto",
}

func init() { proto.RegisterFile("candig/metadata.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 973 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x6e, 0xdb, 0x36,
	0x18, 0x8f, 0xec, 0xc4, 0x7f, 0x3e, 0xdb, 0x59, 0xc7, 0xa6, 0xab, 0x2a, 0xa4, 0xad, 0xc3, 0xec,
	0xe0, 0xe6, 0x60, 0x79, 0x4e, 0x16, 0x04, 0x29, 0x86, 0x2d, 0xed, 0xba, 0xd8, 0xc0, 0x86, 0x16,
	0xca, 0xb6, 0xab, 0x41, 0x4b, 0x84, 0x27, 0x4c, 0x96, 0x3c, 0x91, 0x0e, 0x16, 0x74, 0x3d, 0x6c,
	0xa7, 0xdd, 0x76, 0xe8, 0x61, 0xc7, 0x3d, 0xc6, 0x1e, 0x64, 0xaf, 0xb0, 0x27, 0xd8, 0x13, 0x0c,
	0xa4, 0x28, 0x89, 0x8e, 0x65, 0x1b, 0xe8, 0xa1, 0x37, 0xf1, 0xe3, 0x8f, 0xfc, 0x7e, 0xbf, 0xdf,
	0x47, 0xea, 0x23, 0xdc, 0x73, 0x49, 0xe8, 0xf9, 0x13, 0x7b, 0x4a, 0x39, 0xf1, 0x08, 0x27, 0xdd,
	0x59, 0x1c, 0xf1, 0x08, 0xd5, 0xd2, 0xb1, 0xb5, 0x3f, 0x89, 0xa2, 0x49, 0x40, 0x6d, 0x32, 0xf3,
	0x6d, 0x12, 0x86, 0x11, 0x27, 0xdc, 0x8f, 0x42, 0x96, 0xe0, 0x70, 0x17, 0xcc, 0x2b, 0x4a, 0x62,
	0xf7, 0x87, 0x61, 0xe8, 0xf9, 0xd7, 0xbe, 0x37, 0x27, 0x01, 0x73, 0xe8, 0x4f, 0x73, 0xca, 0x38,
	0x42, 0xb0, 0x1d, 0x92, 0x29, 0x35, 0x8d, 0xb6, 0xd1, 0xa9, 0x3b, 0xf2, 0x1b, 0x3f, 0x85, 0xbd,
	0x4b, 0xca, 0x73, 0x70, 0x8a, 0x3d, 0x84, 0x96, 0x9f, 0x05, 0x47, 0xbe, 0xa7, 0x16, 0x35, 0xf3,
	0xe0, 0xd0, 0xc3, 0x17, 0x70, 0xef, 0xd5, 0x7c, 0x61, 0x31, 0x9b, 0x45, 0x21, 0xa3, 0x68, 0x17,
	0x4a, 0xd9, 0x92, 0x92, 0xef, 0x21, 0x13, 0xaa, 0x6c, 0xee, 0xba, 0x94, 0x31, 0xb3, 0xd4, 0x36,
	0x3a, 0x35, 0x27, 0x1d, 0xe2, 0x2f, 0x60, 0xef, 0xd5, 0x9c, 0x3f, 0xf3, 0x23, 0x46, 0xa6, 0xb3,
	0x80, 0xbe, 0xc3, 0x0e, 0x57, 0xf0, 0xa0, 0x40, 0xb1, 0xda, 0xe6, 0x14, 0x1a, 0x39, 0x63, 0x66,
	0x1a, 0xed, 0x72, 0xa7, 0xd1, 0xdf, 0xeb, 0x66, 0xe6, 0x6a, 0xdc, 0x75, 0x20, 0x76, 0xe0, 0x7e,
	0xb2, 0x69, 0xc6, 0x6c, 0x9d, 0x8b, 0xcb, 0x6e, 0x95, 0x0a, 0xdc, 0x3a, 0x83, 0xbb, 0x97, 0x54,
	0x97, 0x9a, 0xec, 0x77, 0x00, 0xcd, 0x71, 0x1a, 0xcb, 0x8d, 0x6e, 0x64, 0xb1, 0xa1, 0x87, 0x5f,
	0xa6, 0x45, 0xd5, 0xd9, 0x28, 0x85, 0xc7, 0x00, 0x19, 0x34, 0x15, 0x78, 0x37, 0x17, 0x98, 0xa7,
	0xd3, 0x60, 0xf8, 0xef, 0x12, 0x40, 0x2e, 0x7d, 0xc9, 0xec, 0x87, 0x00, 0x62, 0x31, 0xa3, 0x3c,
	0xd7, 0x52, 0x57, 0x91, 0xa1, 0x97, 0x39, 0x50, 0xd6, 0x1c, 0x68, 0x43, 0xc3, 0xa3, 0xcc, 0x8d,
	0xfd, 0x99, 0x38, 0x8d, 0xe6, 0x76, 0x22, 0x42, 0x0b, 0x89, 0x0a, 0xba, 0x31, 0x25, 0x9c, 0x7a,
	0xe6, 0x8e, 0x9c, 0x4d, 0x87, 0x62, 0x66, 0x3e, 0xf3, 0xe4, 0x4c, 0x25, 0x99, 0x51, 0x43, 0xd4,
	0x83, 0x2a, 0x9b, 0x51, 0xd7, 0xa7, 0xcc, 0xac, 0xb6, 0x8d, 0x4e, 0xa3, 0xff, 0x51, 0xae, 0xec,
	0x65, 0xc8, 0xa3, 0x20, 0x9a, 0xdc, 0x7c, 0x4b, 0xe3, 0xa9, 0x93, 0xc2, 0x50, 0x07, 0xca, 0x8c,
	0xfe, 0x6c, 0xd6, 0xd6, 0xa2, 0x05, 0x04, 0x9d, 0x00, 0x10, 0xce, 0x63, 0x7f, 0x3c, 0xe7, 0x94,
	0x99, 0x20, 0x17, 0x68, 0x27, 0xe3, 0x22, 0x9b, 0x73, 0x34, 0x1c, 0xfe, 0xaf, 0x04, 0xf5, 0xcc,
	0xd3, 0xf7, 0x63, 0x5c, 0x0f, 0xaa, 0x9e, 0xcf, 0x28, 0x61, 0x54, 0x1a, 0xb7, 0xc6, 0x04, 0x05,
	0xd3, 0xad, 0xae, 0xac, 0xb4, 0xba, 0xba, 0x68, 0xf5, 0xd2, 0x11, 0xae, 0x2d, 0x1f, 0xe1, 0x77,
	0xf3, 0x0c, 0x7d, 0x0e, 0xfb, 0xda, 0xd6, 0x64, 0x42, 0x47, 0x84, 0x8f, 0xdc, 0x28, 0x08, 0xa8,
	0x2b, 0x35, 0x37, 0x64, 0xa6, 0x07, 0x39, 0xe6, 0x62, 0x42, 0x2f, 0xf8, 0xf3, 0x0c, 0x80, 0x7f,
	0x2f, 0xc3, 0x6e, 0xb6, 0xf7, 0xf7, 0x24, 0x98, 0x8b, 0x1b, 0xd7, 0x64, 0x3c, 0xf6, 0xc3, 0xc9,
	0xe8, 0x5a, 0x8c, 0x93, 0x1a, 0x0c, 0xb6, 0x9c, 0x46, 0x12, 0x4d, 0x40, 0x07, 0xe2, 0xf6, 0xf3,
	0xd3, 0x13, 0x85, 0x11, 0xf5, 0x28, 0x0f, 0xb6, 0x1c, 0x90, 0x41, 0x1d, 0x72, 0xdc, 0x57, 0x10,
	0x51, 0x99, 0x1d, 0x05, 0x39, 0xee, 0x27, 0x90, 0xc7, 0x00, 0xe3, 0x28, 0x0a, 0x14, 0x42, 0x14,
	0xa8, 0x36, 0xd8, 0x72, 0xea, 0x22, 0x96, 0x71, 0xf1, 0xa2, 0xf9, 0x38, 0xa0, 0x0a, 0x22, 0xaa,
	0x64, 0x08, 0x2e, 0x49, 0x34, 0x01, 0x7d, 0x06, 0xad, 0x48, 0x15, 0x6b, 0xc4, 0x69, 0x3c, 0x5d,
	0x7f, 0xa0, 0x07, 0x5b, 0x4e, 0x33, 0xd2, 0xc6, 0xe8, 0x74, 0xc1, 0xf9, 0xe6, 0x6a, 0xe7, 0x05,
	0x79, 0xcd, 0xfb, 0x17, 0xb0, 0x9b, 0x8d, 0x46, 0x81, 0xcf, 0xb8, 0xd9, 0x92, 0x6b, 0xf7, 0x0b,
	0xd6, 0x4a, 0xa2, 0x5f, 0xfb, 0x8c, 0x0f, 0xb6, 0x9c, 0x56, 0xb6, 0x4a, 0x04, 0x9e, 0x55, 0x61,
	0x47, 0x6a, 0xc3, 0x5f, 0x01, 0x5a, 0xc6, 0xa3, 0x1e, 0x54, 0xe4, 0x74, 0xfa, 0x03, 0x32, 0x57,
	0xed, 0xee, 0x28, 0x1c, 0xfe, 0xd3, 0x00, 0xc8, 0x49, 0xa3, 0x3e, 0x6c, 0x8b, 0x84, 0x6a, 0xf9,
	0xa3, 0x22, 0x61, 0xf2, 0xf3, 0x45, 0xc8, 0xe3, 0x1b, 0x47, 0x62, 0xad, 0xef, 0xa0, 0x9e, 0x85,
	0xd0, 0x1d, 0x28, 0xff, 0x48, 0x6f, 0xd4, 0x55, 0x14, 0x9f, 0xa8, 0xaf, 0x28, 0xcb, 0xb2, 0x6f,
	0x10, 0xec, 0x24, 0xd0, 0xf3, 0xd2, 0x99, 0x81, 0x9f, 0x42, 0x53, 0xaf, 0x04, 0xba, 0x0f, 0x55,
	0x51, 0xaf, 0xfc, 0xd7, 0x5c, 0x11, 0xc3, 0xe4, 0x36, 0xcb, 0x42, 0x26, 0xd7, 0x5c, 0x7e, 0xf7,
	0xff, 0xaa, 0xc0, 0x07, 0xdf, 0xa8, 0x3c, 0x57, 0x34, 0xbe, 0xf6, 0x5d, 0x8a, 0xde, 0x1a, 0xf0,
	0xe1, 0x52, 0x87, 0x42, 0x38, 0xe7, 0xb3, 0xaa, 0x61, 0x5b, 0x87, 0x6b, 0x31, 0x49, 0x03, 0xc0,
	0x9f, 0xfe, 0xf6, 0xcf, 0xbf, 0x6f, 0x4b, 0x36, 0x3e, 0xb2, 0x9f, 0x93, 0xf0, 0xcb, 0xe1, 0x65,
	0xf6, 0x72, 0xb0, 0xaf, 0x7b, 0xdd, 0x4f, 0xba, 0x3d, 0x5b, 0xeb, 0x6b, 0x36, 0x93, 0xdb, 0x9c,
	0x1b, 0x47, 0xe8, 0x0f, 0x03, 0xee, 0xdc, 0x6e, 0x2a, 0xe8, 0xe0, 0x76, 0xc2, 0xa5, 0xf6, 0x67,
	0xe1, 0x75, 0x10, 0x45, 0xe9, 0x44, 0x52, 0xea, 0xe2, 0x27, 0xab, 0x28, 0xe5, 0xad, 0x48, 0x63,
	0xf4, 0xab, 0x01, 0xad, 0x85, 0xb7, 0x08, 0xd2, 0xce, 0x41, 0xd1, 0x23, 0xc5, 0x2a, 0x6c, 0xe4,
	0xf8, 0x5c, 0x66, 0x3f, 0x41, 0xfd, 0xcd, 0x86, 0xd8, 0xaf, 0x17, 0xfe, 0x79, 0x6f, 0xd0, 0x2f,
	0xd0, 0xd4, 0x7b, 0x34, 0x7a, 0xb8, 0xc0, 0xe0, 0x76, 0xef, 0xb6, 0x8a, 0x1a, 0x2d, 0x3e, 0x93,
	0xf9, 0xfb, 0xa8, 0xb7, 0x51, 0xbd, 0xfd, 0x5a, 0xef, 0xfc, 0x6f, 0x50, 0x0c, 0xad, 0x85, 0xf7,
	0x14, 0x2a, 0x14, 0x68, 0x3d, 0xce, 0xa3, 0x85, 0xcf, 0x2f, 0x7c, 0x24, 0x19, 0x7c, 0x6c, 0xe1,
	0xcd, 0x0e, 0xa0, 0x10, 0x9a, 0xfa, 0x03, 0x0c, 0x15, 0x49, 0xb2, 0x1e, 0x2d, 0x64, 0x5c, 0x7a,
	0xad, 0xe1, 0x27, 0x32, 0xe1, 0xa1, 0x75, 0xb0, 0x51, 0xf2, 0xb8, 0x22, 0xdf, 0xa9, 0xc7, 0xff,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x27, 0xd7, 0xa9, 0x24, 0xe8, 0x0a, 0x00, 0x00,
}
